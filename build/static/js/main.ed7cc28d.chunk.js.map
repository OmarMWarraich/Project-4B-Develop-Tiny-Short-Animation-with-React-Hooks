{"version":3,"sources":["components/Card.js","components/Header.js","App.js","serviceWorker.js","index.js"],"names":["Card","names","name","className","Object","keys","map","keyName","class","Header","container","useRef","useEffect","lottie","loadAnimation","current","renderer","loop","autoplay","animationData","require","ref","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"i27cAGe,SAASA,IAEpB,IAAMC,EAAQ,CACV,SAAU,CAAEC,KAAM,WAClB,SAAU,CAAEA,KAAM,WAClB,SAAU,CAAEA,KAAM,YAGtB,OACI,yBAAKC,UAAU,aAEPC,OAAOC,KAAKJ,GAAOK,KAAI,SAAAC,GACnB,IAAML,EAAOD,EAAMM,GACnB,OACI,yBAAKC,MAAM,aACP,yBAAKL,UAAU,OAAM,4BAAKD,EAAKA,Y,0BC6B5CO,MA3Cf,WAEE,IAAMC,EAAYC,iBAAO,MAYzB,OAVAC,qBAAU,WACRC,IAAOC,cAAc,CACnBJ,UAAWA,EAAUK,QACrBC,SAAU,MACVC,MAAM,EACNC,UAAU,EACVC,cAAeC,EAAQ,SAKrB,yBAAKjB,UAAU,eACX,6BACI,yBAAKA,UAAU,QACX,+CAEJ,yBAAKA,UAAU,QACX,4BACI,oCACA,wCACA,0CACA,2CAIZ,iCACI,yBAAKA,UAAU,aACX,yBAAKkB,IAAKX,KAEd,yBAAKP,UAAU,cACX,8CACA,gFACA,+CCzBLmB,MAVf,WAEE,OACE,oCACE,kBAAC,EAAD,MACA,kBAAC,EAAD,QCEcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.ed7cc28d.chunk.js","sourcesContent":["import React from 'react'\nimport './Card.css'\n\nexport default function Card() {\n\n    const names = {\n        \"Box-01\": { name: \"Card-01\" },\n        \"Box-02\": { name: \"Card-02\" }, \n        \"Box-03\": { name: \"Card-03\" }\n    };\n\n    return (\n        <div className=\"container\">\n            {\n                Object.keys(names).map(keyName => {\n                    const name = names[keyName];\n                    return(   \n                        <div class=\"container\">\n                            <div className=\"box\"><h2>{name.name}</h2></div>\n                        </div>\n                    )\n                })\n            }\n        </div>\n    )\n}\n\n","import React, { useEffect, useRef } from 'react';\nimport './Header.css'\nimport lottie from 'lottie-web';\n\nfunction Header() {\n\n  const container = useRef(null)\n\n  useEffect(() => {\n    lottie.loadAnimation({\n      container: container.current,\n      renderer: 'svg',\n      loop: true,\n      autoplay: true,\n      animationData: require('../animation.json')\n    })\n  })\n  \n  return (\n        <div className=\"site_header\">\n            <nav >\n                <div className=\"logo\">\n                    <h1>Modern Website</h1>\n                </div>\n                <div className=\"menu\">\n                    <ul> \n                        <li>Home</li>\n                        <li>Services</li>\n                        <li>Contact us</li>\n                        <li>About us</li>                    \n                    </ul>\n                </div>\n            </nav>\n            <section>\n                <div className=\"left_side\">\n                    <div ref={container}></div>\n                </div>\n                <div className=\"right_side\">\n                    <h1>NINJA BOOTCAMP</h1>\n                    <p>Animated React Website and Animated Illustrations</p>\n                    <button>Welcome</button>\n                </div>\n            </section>\n        </div>\n    );\n}\n\nexport default Header;\n","import React from 'react';\nimport './App.css';\nimport Card from './components/Card';\nimport Header from './components/Header';\n\nfunction App() {\n\n  return (\n    <>\n      <Header/>\n      <Card />\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}